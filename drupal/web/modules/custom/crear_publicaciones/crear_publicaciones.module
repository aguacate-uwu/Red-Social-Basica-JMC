<?php

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\block\Entity\Block;
use Drupal\node\Entity\NodeType;
use Drupal\comment\Entity\CommentType;

/**
 * Implementa hook_install().
 *
 * Esta función se ejecuta cuando se instala el módulo. Crea un nuevo tipo
 * de contenido llamado 'Publicación de Usuario' para contenido generado por
 * los usuarios en la página principal. También asigna permisos para que los
 * usuarios autenticados puedan crear, editar y eliminar su propio contenido
 * de este tipo. Además, asegura que se añada el campo 'Cuerpo' al tipo de
 * contenido y configura las opciones de visualización del formulario y de
 * la vista para este campo. Adicionalmente añade comentarios.
 */
function crear_publicaciones_install() {
  $content_type_id = 'publicacion_usuario';

  // Verificar si el tipo de contenido ya existe.
  $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($content_type_id);
  if (!$content_type) {
    // Crear el tipo de contenido.
    $content_type = \Drupal\node\Entity\NodeType::create([
      'type' => $content_type_id,
      'name' => t('Publicación de Usuario', [], ['context' => 'content type name']),
      'description' => t('Contenido creado por los usuarios en la página principal.', [], ['context' => 'content type description']),
    ]);

    // Eliminar parte innecesaria
    $content_type->setThirdPartySetting('node', 'display_submitted', FALSE);
    $content_type->setThirdPartySetting('menu_ui', 'available_menus', []);
    $content_type->setThirdPartySetting('menu_ui', 'parent', '');
    $content_type->setNewRevision(FALSE);
    
    $content_type->save();
    
    }

    // Asignar permisos para usuarios autenticados.
    $role = \Drupal\user\Entity\Role::load('authenticated');
    if ($role) {
      $permissions = [
        'create ' . $content_type_id . ' content',
        'edit own ' . $content_type_id . ' content',
        'delete own ' . $content_type_id . ' content',
      ];
      foreach ($permissions as $permission) {
        $role->grantPermission($permission);
      }
      $role->save();
    }

    // Añadir el campo 'Cuerpo' si no existe.
    $field_storage = FieldStorageConfig::loadByName('node', 'body');
    if (!$field_storage) {
      $field_storage = FieldStorageConfig::create([
        'entity_type' => 'node',
        'field_name' => 'body',
        'type' => 'text_long',
        'settings' => [
          'max_length' => 16383,
        ],
        'cardinality' => 1,
        'translatable' => TRUE,
      ]);
      $field_storage->save();
    }

    $field = FieldConfig::loadByName('node', $content_type_id, 'body');
    if (!$field) {
      $field = FieldConfig::create([
        'entity_type' => 'node',
        'bundle' => $content_type_id,
        'field_name' => 'body',
        'label' => t('Cuerpo'),
        'settings' => [],
        'required' => TRUE,
      ]);
      $field->save();
    }

    // Configurar la visualización del formulario para el campo 'Cuerpo'.
    $form_display = EntityFormDisplay::load('node.' . $content_type_id . '.default');
    if (!$form_display) {
      $form_display = EntityFormDisplay::create([
        'targetEntityType' => 'node',
        'bundle' => $content_type_id,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }
    $form_display->setComponent('body', [
      'type' => 'text_textarea',
      'settings' => [
        'rows' => 5,
      ],
      'weight' => 0,
      'region' => 'content',
    ]);
    
    // Ocultar campos innecesarios
    $campos_a_ocultar = ['created', 'langcode', 'uid', 'revision_log', 'status', 'promote', 'sticky', 'path'];
    foreach ($campos_a_ocultar as $campo) {
      $form_display->removeComponent($campo);
    }
        
    $form_display->save();

    // esto es solo para saber el nombre de los campos y que pueda quitarlos mejor
    \Drupal::logger('crear_publicaciones')->notice('<pre>' . print_r(array_keys($form_display->getComponents()), TRUE) . '</pre>');

    // Configurar la visualización de la vista para el campo 'Cuerpo'.
    $view_display = EntityViewDisplay::load('node.' . $content_type_id . '.default');
    if (!$view_display) {
      $view_display = EntityViewDisplay::create([
        'targetEntityType' => 'node',
        'bundle' => $content_type_id,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }
    $view_display->setComponent('body', [
      'label' => 'hidden',
      'type' => 'text_default',
      'settings' => [],
    ])->save();

    // Colocar el bloque programáticamente.
    $block_id = 'crear_publicacion_block'; // El ID del bloque
    $region = 'content'; // La región donde quieres colocar el bloque

    if (!Block::load($block_id)) {
    // Crea una instancia del bloque.
    $block = Block::create([
      'id' => $block_id,
      'plugin' => 'crear_publicacion_block', // El ID del plugin del bloque
      'region' => $region,
      'theme' => 'olivero', // El nombre del tema activo
      'settings' => [
        'label' => 'Crear Publicación', // Etiqueta del bloque
        'label_display' => FALSE, // No mostrar el título del bloque
      ],
      'visibility' => [
        'request_path' => [
          'id' => 'request_path',
          'pages' => '<front>', // Solo en la página principal
          'negate' => FALSE,
        ],
      ],
      'status' => 1, // Nos aseguramos de que el bloque esté habilitado
    ]);
    $block->setWeight(-8);
    $block->save();
    }

     // Crear tipo de comentario si no existe
    $comment_type_id = 'comentario_publicacion';
    if (!\Drupal\comment\Entity\CommentType::load($comment_type_id)) {
      \Drupal\comment\Entity\CommentType::create([
        'id' => $comment_type_id,
        'label' => 'Comentario en Publicación',
        'target_entity_type_id' => 'node',
        'bundle' => $content_type_id,
        'description' => 'Comentarios en publicaciones de usuario.',
        'status' => TRUE,
      ])->save();
    }

    // Añadir el campo de comentarios si no existe
    if (!FieldConfig::loadByName('node', $content_type_id, 'comment')) {
      FieldConfig::create([
        'field_name' => 'comment',
        'entity_type' => 'node',
        'bundle' => $content_type_id,
        'label' => 'Comentarios',
        'field_type' => 'comment',
        'settings' => [
          'default_mode' => 1, // 1 = abierto (open)
          'comment_type' => $comment_type_id,
          'perms' => [],
        ],
      ])->save();
    }

    // Asignar permisos para comentar a usuarios autenticados
    $role = \Drupal\user\Entity\Role::load('authenticated');
    if ($role) {
      $role->grantPermission('post comments');
      $role->grantPermission('access comments');
      $role->grantPermission('edit own comments');
      $role->save();
    }

    // Configurar visualización del campo de comentarios
    $view_display = EntityViewDisplay::load('node.' . $content_type_id . '.default');
    if ($view_display) {
      $view_display->setComponent('comment', [
        'type' => 'comment_default',
        'label' => 'above',
      ])->save();
    }

    // Configurar visualización del formulario para comentarios
    $form_display = EntityFormDisplay::load('node.' . $content_type_id . '.default');
    if ($form_display) {
      $form_display->setComponent('comment', [
        'type' => 'comment_default',
        'settings' => [],
      ])->save();
    }

    // Configuración adicional de los comentarios para que no estén en la página principal
    $teaser_display = EntityViewDisplay::load('node.' . $content_type_id . '.teaser');
    if (!$teaser_display) {
      $teaser_display = EntityViewDisplay::create([
        'targetEntityType' => 'node',
        'bundle' => $content_type_id,
        'mode' => 'teaser',
        'status' => TRUE,
      ]);
    }
    $teaser_display->removeComponent('comment');
    $teaser_display->setComponent('comment__comment_count', [
      'type' => 'comment_entity_count',
      'label' => 'inline',
    ])->save();

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * esta función es para ocultar las partes molestas que no quieren irse del bloque
 */
function crear_publicaciones_form_node_publicacion_usuario_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['revision_information'])) {
    $form['revision_information']['#access'] = FALSE;
  }
  if (isset($form['revision_log_message'])) {
    $form['revision_log_message']['#access'] = FALSE;
  }
}